import os

# Path to single locus tree file generated by iqtree
raw_gene_trees = "loci.treefile"

# Taxa expected to be present in each single locus tree
set = {"droebachiensis","fragilis","pallidus","intermedius","purpuratus_SRR7211988","pulcherrimus_SRR5767283","nudus","franciscanus","depressus","lividus"}

def create_input_file(output_file, program, num_reticulations, runs, processors, num_net_returned):
    with open(raw_gene_trees, "r") as f:
        raw_tree_list = f.readlines()

    reject_file = open("rejected_trees.nex", "w")
    
    filtered_gene_tree_lst = []
    for line in raw_tree_list:
        lst = []
        for n in set:
            lst.append(n in line)
        if all(lst) == True:
            filtered_gene_tree_lst.append(line)
        else:
            reject_file.write(line)
    
    reject_file.close()

    for count, tree in enumerate(filtered_gene_tree_lst):
        line = "Tree gt" + str(count) + "=" + tree
        filtered_gene_tree_lst[count] = line

    with open(output_file,'a') as f2:
        line1 = "#NEXUS"
        line2 = "BEGIN Trees;"
        line3 = "END;"
        line4 = "Begin PHYLONET;"
        line5 = "{} (all) {} -x {} -pl {} -n {} -di;".format(program, num_reticulations, runs, processors, num_net_returned)
        line6 = "END;"
        f2.write(line1 + "\n" + "\n")
        f2.write(line2 + "\n" + "\n")
        for tree in filtered_gene_tree_lst:
            f2.write(tree)
        f2.write("\n" + line3 + "\n" + "\n")
        f2.write(line4 + "\n" + "\n")
        f2.write(line5 + "\n" + "\n")
        f2.write(line6)

def main():
    create_input_file("retic_0", "InferNetwork_ML", "0", "200", "24", "1")
    create_input_file("retic_1", "InferNetwork_ML", "1", "200", "24", "2")
    create_input_file("retic_2", "InferNetwork_ML", "2", "200", "24", "2")
    create_input_file("retic_3", "InferNetwork_ML", "3", "200", "24", "2")

if __name__ == "__main__":
    main()
